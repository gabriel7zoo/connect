generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String           @id @default(uuid())
  email         String           @unique
  display_name  String?
  profile_url   String?
  created_at    DateTime         @default(now())
  is_verified   Boolean          @default(false)
  updated_at    DateTime         @default(now()) @updatedAt
  invited_users InvitedUser[]
  messages      Message[]
  tickets       Ticket[]
  workspaces    UserWorkspaces[]
}

model Workspace {
  id            String           @id @default(uuid())
  name          String
  created_at    DateTime         @default(now())
  updated_at    DateTime         @default(now()) @updatedAt
  industry      String
  team_size     TeamSize
  tags          String[]
  invited_users InvitedUser[]
  tickets       Ticket[]
  users         UserWorkspaces[]
}

model Ticket {
  id            String         @id @default(uuid())
  workspace_id  String
  title         String
  contact_id    String?
  assigned_to   String?
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  priority      PriorityLevels @default(NONE)
  messages      Message[]
  assigned_user User?          @relation(fields: [assigned_to], references: [id])
  contact       Contact?       @relation(fields: [contact_id], references: [id])
  workspace     Workspace      @relation(fields: [workspace_id], references: [id])
}

model Message {
  id         String      @id @default(uuid())
  subject    String
  content    String
  created_at DateTime    @default(now())
  ticket_id  String
  author_id  String
  type       MessageType
  author     User        @relation(fields: [author_id], references: [id])
  ticket     Ticket      @relation(fields: [ticket_id], references: [id])
}

model Contact {
  id         String   @id @default(uuid())
  first_name String
  last_name  String
  company_id String
  company    Company  @relation(fields: [company_id], references: [id])
  tickets    Ticket[]
}

model Company {
  id       String    @id @default(uuid())
  name     String
  contacts Contact[]
}

model VerificationToken {
  email   String   @id
  token   String
  expires DateTime
}

model UserWorkspaces {
  id           String    @id @default(uuid())
  workspace_id String
  user_id      String
  user         User      @relation(fields: [user_id], references: [id])
  workspace    Workspace @relation(fields: [workspace_id], references: [id])

  @@index([workspace_id, user_id])
}

model InvitedUser {
  id              String    @id @default(uuid())
  name            String
  email           String
  invited_by      String
  workspace_id    String
  created_at      DateTime  @default(now())
  invited_by_user User      @relation(fields: [invited_by], references: [id])
  workspace       Workspace @relation(fields: [workspace_id], references: [id])
}

enum TeamSize {
  SMALL
  MEDIUM
  LARGE
  ENTERPRISE
}

enum PriorityLevels {
  NONE
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageType {
  MESSAGE
  EMAIL
  PRIORITY
  ASSIGN
}
